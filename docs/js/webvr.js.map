{"version":3,"names":[],"mappings":"","sources":["src/js/webvr.js"],"sourcesContent":["/* jshint esversion: 6 */\n/* global window, document, TweenMax, THREE, WEBVR */\n\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport { ORIGIN, POINTER_RADIUS, ROOM_RADIUS, TEST_ENABLED } from './const';\nimport InteractiveMesh from './interactive/interactive.mesh';\nimport Orbit from './orbit/orbit';\nimport Views from './views/views';\nimport Controllers from './vr/controllers';\nimport { VR, VR_MODE } from './vr/vr';\n\nclass webvr {\n\n\tconstructor() {\n\t\tthis.i = 0;\n\t\tthis.mouse = { x: 0, y: 0 };\n\t\tthis.parallax = { x: 0, y: 0 };\n\t\tthis.size = { width: 0, height: 0, aspect: 0 };\n\t\tthis.cameraDirection = new THREE.Vector3();\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tconst section = this.section = document.querySelector('.webvr');\n\t\tconst container = this.container = section.querySelector('.webvr__container');\n\t\tconst debugInfo = this.debugInfo = section.querySelector('.debug__info');\n\t\tconst debugSave = this.debugSave = section.querySelector('.debug__save');\n\n\t\tconst scene = this.scene = new THREE.Scene();\n\t\tconst camera = this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\t\tcamera.position.set(0, 0, 10);\n\t\tcamera.target = new THREE.Vector3();\n\n\t\tconst geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n\t\tconst material = new THREE.MeshStandardMaterial({ color: 0x00ff00 });\n\t\tconst cube = this.cube = new THREE.Mesh(geometry, material);\n\t\tcube.position.set(0, 0, -5);\n\t\tscene.add(cube);\n\n\t\tconst light = new THREE.HemisphereLight(0xffffff, 0x000000, 1);\n\t\tscene.add(light);\n\n\t\tconst renderer = this.renderer = new THREE.WebGLRenderer();\n\t\trenderer.setClearColor(0x666666, 1);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\trenderer.vr.enabled = true;\n\n\t\tconst vr = this.vr = new VR(renderer, { referenceSpaceType: 'local' }, (error) => {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t});\n\t\tcontainer.appendChild(vr.element);\n\n\t\tconst pivot = new THREE.Group();\n\t\tscene.add(pivot);\n\n\t\tif (this.vr.mode !== VR_MODE.NONE) {\n\t\t\tconst controllers = this.controllers = new Controllers(renderer, scene, pivot);\n\n\t\t}\n\t\tconsole.log(this.vr.mode);\n\n\t\tthis.container.appendChild(renderer.domElement);\n\n\t\tthis.onWindowResize = this.onWindowResize.bind(this);\n\t\twindow.addEventListener('resize', this.onWindowResize, false);\n\t}\n\n\tonWindowResize() {\n\t\ttry {\n\t\t\tconst container = this.container,\n\t\t\t\trenderer = this.renderer,\n\t\t\t\tcamera = this.camera;\n\t\t\tconst width = container.offsetWidth;\n\t\t\tconst height = container.offsetHeight;\n\t\t\tif (renderer) {\n\t\t\t\trenderer.setSize(width, height);\n\t\t\t}\n\t\t\tif (camera) {\n\t\t\t\tcamera.aspect = width / height;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tanimate() {\n\t\tconst renderer = this.renderer;\n\t\trenderer.setAnimationLoop(() => {\n\t\t\tthis.render();\n\t\t});\n\t}\n\n\trender(delta) {\n\t\ttry {\n\t\t\tthis.cube.rotation.y += Math.PI / 180 * 5;\n\t\t\tthis.cube.rotation.x += Math.PI / 180 * 1;\n\t\t\tconst s = 1 + Math.cos(this.i * 0.1) * 0.5;\n\t\t\tthis.cube.scale.set(s, s, s);\n\t\t\tif (this.controllers) {\n\t\t\t\tthis.controllers.update();\n\t\t\t}\n\t\t\tconst renderer = this.renderer;\n\t\t\trenderer.render(this.scene, this.camera);\n\t\t\tthis.i++;\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n}\n\nconst tour = new webvr();\ntour.animate();\n"],"file":"docs\\js\\webvr.js"}