{"version":3,"names":[],"mappings":"","sources":["src/js/webvr.js"],"sourcesContent":["/* jshint esversion: 6 */\n/* global window, document, TweenMax, THREE, WEBVR */\n\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport { ORIGIN, POINTER_RADIUS, ROOM_RADIUS, TEST_ENABLED } from './const';\nimport InteractiveMesh from './interactive/interactive.mesh';\nimport Orbit from './orbit/orbit';\nimport Views from './views/views';\nimport Controllers from './vr/controllers';\nimport { VR, VR_MODE } from './vr/vr';\n\nclass webvr {\n\n\tconstructor() {\n\t\tthis.mouse = { x: 0, y: 0 };\n\t\tthis.parallax = { x: 0, y: 0 };\n\t\tthis.size = { width: 0, height: 0, aspect: 0 };\n\t\tthis.cameraDirection = new THREE.Vector3();\n\t\tthis.init();\n\t}\n\n\tload(jsonUrl) {\n\t\ttry {\n\t\t\tfetch(jsonUrl).then(response => response.json()).then(response => {\n\t\t\t\tthis.pivot.views = response.views;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tinit() {\n\t\tconst body = this.body = document.querySelector('body');\n\t\tconst section = this.section = document.querySelector('.webvr');\n\t\tconst container = this.container = section.querySelector('.webvr__container');\n\t\tconst debugInfo = this.debugInfo = section.querySelector('.debug__info');\n\t\tconst debugSave = this.debugSave = section.querySelector('.debug__save');\n\t\t// Dom.detect(body);\n\t\t// body.classList.add('ready');\n\t\tthis.onWindowResize = this.onWindowResize.bind(this);\n\t\tthis.onKeyDown = this.onKeyDown.bind(this);\n\t\tthis.onMouseDown = this.onMouseDown.bind(this);\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\n\t\tthis.onMouseWheel = this.onMouseWheel.bind(this);\n\t\tthis.onSave = this.onSave.bind(this);\n\t\t//\n\t\tconst scene = this.scene = this.addScene();\n\t\tconst camera = this.camera = this.addCamera();\n\t\tconst pivot = this.pivot = new Views(scene);\n\t\tpivot.on('onEnterView', (view) => {\n\t\t\tif (this.orbit) {\n\t\t\t\tthis.orbit.setOrientation(view.orientation);\n\t\t\t}\n\t\t});\n\t\tpivot.on('pointDown', (point) => {\n\t\t\tconst position = point.position;\n\t\t\tconst debugInfo = `down => {${position.x}, ${position.y}, ${position.z}}`;\n\t\t\tthis.debugInfo.innerHTML = debugInfo;\n\t\t});\n\t\tconst renderer = this.renderer = this.addRenderer();\n\t\t// container.appendChild(WEBVR.createButton(renderer, { referenceSpaceType: 'local' }));\n\t\tconst vr = this.vr = this.addVR(renderer, container);\n\t\t// this.addIO();\n\t\tconsole.log('vr.mode', vr.mode, TEST_ENABLED);\n\t\tif (vr.mode !== VR_MODE.NONE) {\n\t\t\ttry {\n\t\t\t\tconst controllers = this.controllers = new Controllers(renderer, scene, pivot);\n\t\t\t\t// const topBar = this.topBar = new TopBar(pivot);\n\t\t\t\tconst pointer = this.pointer = this.addPointer(pivot);\n\t\t\t\tthis.addPointerListeners();\n\t\t\t} catch (error) {\n\t\t\t\tthis.debugInfo.innerHTML = error;\n\t\t\t}\n\t\t} else if (TEST_ENABLED) {\n\t\t\tconst controllers = this.controllers = new Controllers(renderer, scene, pivot);\n\t\t\t// const topBar = this.topBar = new TopBar(pivot);\n\t\t\tconst pointer = this.pointer = this.addPointer(pivot);\n\t\t\tthis.addPointerListeners();\n\t\t\tcamera.target.z = ROOM_RADIUS;\n\t\t\tcamera.lookAt(camera.target);\n\t\t\tconst orbit = this.orbit = new Orbit();\n\t\t\tconst dragListener = this.dragListener = orbit.setDragListener(container);\n\t\t} else {\n\t\t\tcamera.target.z = ROOM_RADIUS;\n\t\t\tcamera.lookAt(camera.target);\n\t\t\tconst orbit = this.orbit = new Orbit();\n\t\t\tconst dragListener = this.dragListener = orbit.setDragListener(container);\n\t\t}\n\t\t// raycaster\n\t\tconst raycaster = this.raycaster = new THREE.Raycaster();\n\t\twindow.addEventListener('resize', this.onWindowResize, false);\n\t\twindow.addEventListener('keydown', this.onKeyDown, false);\n\t\tdocument.addEventListener('mousemove', this.onMouseMove, false);\n\t\tdocument.addEventListener('wheel', this.onMouseWheel, false);\n\t\tthis.container.addEventListener('mousedown', this.onMouseDown, false);\n\t\tthis.container.addEventListener('mouseup', this.onMouseUp, false);\n\t\tthis.debugSave.addEventListener('click', this.onSave, false);\n\t\tthis.section.classList.add('init');\n\t\tthis.onWindowResize();\n\t}\n\n\taddRenderer() {\n\t\tconst renderer = new THREE.WebGLRenderer({\n\t\t\tantialias: true,\n\t\t\tlocalClippingEnabled: true,\n\t\t\t// logarithmicDepthBuffer: true,\n\t\t\t// premultipliedAlpha: true,\n\t\t\t// alpha: true,\n\t\t});\n\t\tthis.renderer = renderer;\n\t\t// renderer.shadowMap.enabled = true;\n\t\trenderer.setClearColor(0x000000, 1);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\trenderer.vr.enabled = true;\n\t\t// container.innerHTML = '';\n\t\tthis.container.appendChild(renderer.domElement);\n\t\treturn renderer;\n\t}\n\n\taddScene() {\n\t\tconst scene = new THREE.Scene();\n\t\t// scene.background = new THREE.Color(0x00000000);\n\t\t// scene.background = new THREE.Color(0x404040);\n\t\t// scene.fog = new THREE.Fog(scene.background, 10, 700);\n\t\treturn scene;\n\t}\n\n\taddCamera() {\n\t\tconst camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, ROOM_RADIUS * 2);\n\t\tcamera.target = new THREE.Vector3();\n\t\treturn camera;\n\t}\n\n\taddVR(renderer, container) {\n\t\tconst vr = new VR(renderer, { referenceSpaceType: 'local' }, (error) => {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t});\n\t\tcontainer.appendChild(vr.element);\n\t\treturn vr;\n\t}\n\n\taddPointer(parent) {\n\t\t// size 2 about 20 cm radius\n\t\tconst geometry = new THREE.PlaneBufferGeometry(1.2, 1.2, 2, 2);\n\t\t// const geometry = new THREE.SphereBufferGeometry(1, 8, 8);\n\t\tconst loader = new THREE.TextureLoader();\n\t\tconst texture = loader.load('img/pin.png');\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\t// texture.wrapT = THREE.RepeatWrapping;\n\t\t// texture.repeat.y = 1;\n\t\t// texture.anisotropy = 0;\n\t\t// texture.magFilter = THREE.LinearMipMapLinearFilter;\n\t\t// texture.minFilter = THREE.NearestFilter;\n\t\tconst material = new THREE.MeshBasicMaterial({\n\t\t\t// color: 0xff0000,\n\t\t\tmap: texture,\n\t\t\t// alphaMap: texture,\n\t\t\t// alphaTest: 0.5,\n\t\t\t// blending: THREE.AdditiveBlending,\n\t\t\t// depthTest: false,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.9,\n\t\t\t// side: THREE.DoubleSide,\n\t\t});\n\n\t\t/*\n\t\tTHREE.NoBlending\n\t\tTHREE.NormalBlending\n\t\tTHREE.AdditiveBlending\n\t\tTHREE.SubtractiveBlending\n\t\tTHREE.MultiplyBlending\n\t\tTHREE.CustomBlending\n\t\t*/\n\t\t// material.blending = THREE.AdditiveBlending;\n\t\t/*\n        material.blending = THREE.CustomBlending;\n\t\tmaterial.blendEquation = THREE.MaxEquation; //default\n\t\tmaterial.blendSrc = THREE.OneFactor; // THREE.SrcAlphaFactor; //default\n        material.blendDst = THREE.OneFactor; // THREE.OneMinusSrcAlphaFactor; //default\n        */\n\t\tconst mesh = new THREE.Mesh(geometry, material);\n\t\tmesh.renderOrder = 1000;\n\t\t// mesh.position.x = 100000;\n\t\tmesh.position.set(-100000, -100000, -100000);\n\t\t// mesh.geometry.rotateX(Math.PI);\n\t\t// mesh.lookAt(ORIGIN);\n\t\t// mesh.lookAt(this.camera.position);\n\t\tparent.add(mesh);\n\t\treturn mesh;\n\t}\n\n\taddPointerListeners() {\n\t\tconst pivot = this.pivot;\n\t\tconst pointer = this.pointer;\n\t\tconst sphere = pivot.room.sphere;\n\t\tsphere.on('hit', (sphere) => {\n\t\t\tconst intersection = sphere.intersection;\n\t\t\tlet position = intersection.point.normalize().multiplyScalar(POINTER_RADIUS);\n\t\t\tposition = pivot.worldToLocal(position);\n\t\t\tpointer.position.set(position.x, position.y, position.z);\n\t\t\tpointer.lookAt(ORIGIN);\n\t\t\t// console.log(position.x, position.y, position.z);\n\t\t\tpointer.scale.setScalar(pivot.busy ? 0 : 1);\n\t\t});\n\t\tsphere.on('down', (sphere) => {\n\t\t\tpointer.material.color.setHex(0x0000ff);\n\t\t\tpointer.material.opacity = 1.0;\n\t\t\tpointer.material.needsUpdate = true;\n\t\t});\n\t\tsphere.on('up', (sphere) => {\n\t\t\tpointer.material.color.setHex(0xffffff);\n\t\t\tpointer.material.opacity = 0.9;\n\t\t\tpointer.material.needsUpdate = true;\n\t\t});\n\t}\n\n\taddIO() {\n\t\tconst rr = () => {\n\t\t\treturn -20 + Math.random() * 40;\n\t\t};\n\t\tconst ims = this.ims = new Array(10).fill(null).map(x => {\n\t\t\tconst im = new InteractiveMesh();\n\t\t\tim.position.set(rr(), 0, rr());\n\t\t\tim.on('over', (item) => {\n\t\t\t\titem.material.color.setHex(0xff0000);\n\t\t\t});\n\t\t\tim.on('out', (item) => {\n\t\t\t\titem.material.color.setHex(0xff00ff);\n\t\t\t});\n\t\t\tim.on('down', (item) => {\n\t\t\t\titem.material.color.setHex(0x00ff00);\n\t\t\t});\n\t\t\tim.on('up', (item) => {\n\t\t\t\titem.material.color.setHex(0xff00ff);\n\t\t\t});\n\t\t\tthis.pivot.add(im);\n\t\t\treturn im;\n\t\t});\n\t}\n\n\t// events\n\n\tonWindowResize() {\n\t\ttry {\n\t\t\tconst container = this.container,\n\t\t\t\trenderer = this.renderer,\n\t\t\t\tcamera = this.camera;\n\t\t\tconst size = this.size;\n\t\t\tsize.width = container.offsetWidth;\n\t\t\tsize.height = container.offsetHeight;\n\t\t\tsize.aspect = size.width / size.height;\n\t\t\tif (renderer) {\n\t\t\t\trenderer.setSize(size.width, size.height);\n\t\t\t}\n\t\t\tif (camera) {\n\t\t\t\tcamera.aspect = size.width / size.height;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tonKeyDown(e) {\n\t\ttry {\n\t\t\t// console.log(e.which, e.key);\n\t\t\tconst key = `${e.which} ${e.key}`;\n\t\t\tif (this.vr.mode !== VR_MODE.NONE || TEST_ENABLED) {\n\t\t\t\tthis.controllers.setText(key);\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 37: // left\n\t\t\t\t\t\tthis.controllers.menu.prev();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 38: // up\n\t\t\t\t\t\tthis.controllers.menu.exit();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 40: // down\n\t\t\t\t\t\tthis.controllers.menu.enter();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 39: // right\n\t\t\t\t\t\tthis.controllers.menu.next();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.debugInfo.innerHTML = key;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tonMouseDown(event) {\n\t\tif (TEST_ENABLED) {\n\t\t\t// this.dragListener.start();\n\t\t\tthis.controllers.setText('down');\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis.mousedown = true;\n\t\t\tconst raycaster = this.raycaster;\n\t\t\t// update the picking ray with the camera and mouse position\n\t\t\traycaster.setFromCamera(this.mouse, this.camera);\n\t\t\t// calculate objects intersecting the picking ray\n\t\t\tif (event.shiftKey) {\n\t\t\t\tconst intersections = raycaster.intersectObjects(this.pivot.room.children);\n\t\t\t\tif (intersections) {\n\t\t\t\t\tconst intersection = intersections.find(x => x !== undefined);\n\t\t\t\t\tthis.createPoint(intersection);\n\t\t\t\t}\n\t\t\t\t// console.log(intersections);\n\t\t\t\t/*\n\t\t\t\tfor (var i = 0; i < intersects.length; i++ ) {\n\t\t\t\t\tconsole.log(intersections[i])\n\t\t\t\t\tintersects[i].object.material.color.set( 0xff0000 );\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t}\n\t\t\t/* else if (this.points) {\n\t\t\t\traycaster.params.Points.threshold = 10.0;\n\t\t\t\tconst intersections = raycaster.intersectObjects(this.points.children);\n\t\t\t\tif (intersections) {\n\t\t\t\t\tconst intersection = intersections.find(x => x !== undefined);\n\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\tconst index = intersection.index;\n\t\t\t\t\t\tconst point = intersection.point;\n\t\t\t\t\t\tconst debugInfo = `${index} => {${point.x}, ${point.y}, ${point.z}}`;\n\t\t\t\t\t\t// console.log(index, point, debugInfo);\n\t\t\t\t\t\tthis.debugInfo.innerHTML = debugInfo;\n\t\t\t\t\t\tthis.pivot.index = (this.pivot.index + 1) % this.pivot.views.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} */\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tonMouseMove(event) {\n\t\ttry {\n\t\t\tconst w2 = this.container.offsetWidth / 2;\n\t\t\tconst h2 = this.container.offsetHeight / 2;\n\t\t\tthis.mouse = {\n\t\t\t\tx: (event.clientX - w2) / w2,\n\t\t\t\ty: -(event.clientY - h2) / h2,\n\t\t\t};\n\t\t\tif (TEST_ENABLED) {\n\t\t\t\treturn this.controllers.updateTest(this.mouse);\n\t\t\t}\n\t\t\tconst raycaster = this.raycaster;\n\t\t\traycaster.setFromCamera(this.mouse, this.camera);\n\t\t\tInteractiveMesh.hittest(raycaster, this.mousedown);\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tonMouseUp(event) {\n\t\tif (TEST_ENABLED) {\n\t\t\t// this.dragListener.end();\n\t\t\tthis.controllers.setText('up');\n\t\t\treturn;\n\t\t}\n\t\tthis.mousedown = false;\n\t}\n\n\tonMouseWheel(event) {\n\t\ttry {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = camera.fov + event.deltaY * 0.01;\n\t\t\tcamera.fov = THREE.Math.clamp(fov, 30, 75);\n\t\t\tcamera.updateProjectionMatrix();\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tonSave(event) {\n\t\ttry {\n\t\t\tthis.view.orientation = this.orbit.getOrientation();\n\t\t\tthis.saveData({ views: this.pivot.views }, 'vr.json');\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\t// animation\n\n\tanimate() {\n\t\tconst renderer = this.renderer;\n\t\trenderer.setAnimationLoop(() => {\n\t\t\tthis.render();\n\t\t});\n\t}\n\n\trender(delta) {\n\t\ttry {\n\t\t\tconst cameraDirection = this.camera.getWorldDirection(this.cameraDirection);\n\t\t\tif (this.vr.mode !== VR_MODE.NONE) {\n\t\t\t\t// this.dragListener.move();\n\t\t\t\tthis.controllers.update();\n\t\t\t\tthis.updateController();\n\t\t\t\t/*\n\t\t\t\tthis.topBar.active = this.controllers.controller && this.pointer.position.y > 15;\n\t\t\t\tthis.topBar.update(cameraDirection);\n\t\t\t\t*/\n\t\t\t} else if (TEST_ENABLED) {\n\t\t\t\t// this.dragListener.move();\n\t\t\t\tthis.updateCamera();\n\t\t\t\tthis.updateController();\n\t\t\t\t/*\n\t\t\t\tthis.topBar.active = this.controllers.controller && this.pointer.position.y > 15;\n\t\t\t\tthis.topBar.update(cameraDirection);\n\t\t\t\t*/\n\t\t\t} else {\n\t\t\t\tthis.updateCamera();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t\tconst renderer = this.renderer;\n\t\trenderer.render(this.scene, this.camera);\n\t}\n\n\tupdatePointer(raycaster) {\n\t\tconst intersections = raycaster.intersectObjects(this.pivot.room.children);\n\t\tif (intersections.length) {\n\t\t\tconst intersection = intersections[0];\n\t\t\t// const intersection = intersections.find(x => x !== undefined);\n\t\t\tif (intersection) {\n\t\t\t\t// const index = intersection.index;\n\t\t\t\t// const point = intersection.point;\n\t\t\t\t// const debugInfo = `${index} => {${point.x}, ${point.y}, ${point.z}}`;\n\t\t\t\t// console.log(index, point, debugInfo);\n\t\t\t\t// this.debugInfo.innerHTML = debugInfo;\n\t\t\t\t// console.log(intersection.point);\n\t\t\t\tlet position = intersection.point.normalize().multiplyScalar(POINTER_RADIUS);\n\t\t\t\tposition = this.pivot.worldToLocal(position);\n\t\t\t\tthis.pointer.position.set(position.x, position.y, position.z);\n\t\t\t\tthis.pointer.lookAt(ORIGIN);\n\t\t\t\t// console.log(position.x, position.y, position.z);\n\t\t\t}\n\t\t}\n\t\tif (this.controllers) {\n\t\t\tthis.pointer.material.color.setHex(this.controllers.gamepads.button ? 0x0000ff : 0xffffff);\n\t\t\tthis.pointer.material.opacity = this.controllers.gamepads.button ? 1.0 : 0.5;\n\t\t}\n\t\tthis.pointer.scale.setScalar(this.pivot.busy ? 0 : 1);\n\t\t// this.pivot.rotation.y = (this.pivot.ery || 0);\n\t\t// this.pivot.rotation.y += ((this.pivot.ery || 0) - this.pivot.rotation.y) / 10;\n\t}\n\n\tupdateCamera() {\n\t\tconst orbit = this.orbit;\n\t\tconst camera = this.camera;\n\t\torbit.update();\n\t\tcamera.target.x = ROOM_RADIUS * Math.sin(orbit.phi) * Math.cos(orbit.theta);\n\t\tcamera.target.y = ROOM_RADIUS * Math.cos(orbit.phi);\n\t\tcamera.target.z = ROOM_RADIUS * Math.sin(orbit.phi) * Math.sin(orbit.theta);\n\t\tcamera.lookAt(camera.target);\n\t\t/*\n\t\t// distortion\n\t\tcamera.position.copy( camera.target ).negate();\n\t\t*/\n\t}\n\n\tupdateController() {\n\t\ttry {\n\t\t\tconst controllers = this.controllers;\n\t\t\tconst controller = controllers.controller;\n\t\t\tif (controller) {\n\t\t\t\tconst raycaster = this.raycaster;\n\t\t\t\tconst position = controller.position;\n\t\t\t\tconst rotation = controller.getWorldDirection(controllers.controllerDirection).multiplyScalar(-1);\n\t\t\t\traycaster.set(position, rotation);\n\t\t\t\tconst hit = InteractiveMesh.hittest(raycaster, controllers.gamepads.button);\n\t\t\t\tif (hit && hit !== this.pivot.room.sphere) {\n\t\t\t\t\tcontrollers.hapticFeedback();\n\t\t\t\t}\n\t\t\t\t// this.updatePointer(raycaster);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\t// utils\n\n\tsaveData(data, filename = 'console.json') {\n\t\tif (!data) {\n\t\t\tconsole.error('Console.save: No data');\n\t\t\treturn;\n\t\t}\n\t\tif (typeof data === 'object') {\n\t\t\tdata = JSON.stringify(data, undefined, 4);\n\t\t}\n\t\tconst blob = new Blob([data], { type: 'text/json' });\n\t\tconst event = document.createEvent('MouseEvents');\n\t\tconst anchor = document.createElement('a');\n\t\tanchor.download = filename;\n\t\tanchor.href = window.URL.createObjectURL(blob);\n\t\tanchor.dataset.downloadurl = ['text/json', anchor.download, anchor.href].join(':');\n\t\tevent.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t\tanchor.dispatchEvent(event);\n\t}\n\n}\n\nconst tour = new webvr();\ntour.animate();\ntour.load('data/vr.json');\n\n/*\n\ncopyGeometry() {\n\tvar MAX_POINTS = 500;\n\t// geometry\n\tvar geometry = new THREE.BufferGeometry();\n\t// attributes\n\tvar positions = new Float32Array(MAX_POINTS * 3); // 3 vertices per point\n\tgeometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n\t// draw range\n\tvar drawCount = 2; // draw the first 2 points, only\n\tgeometry.setDrawRange(0, drawCount);\n\t// material\n\tvar material = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 2 });\n\t// line\n\tvar line = new THREE.Line(geometry, material);\n\tscene.add(line);\n\t// And then to later update after adding new point information:\n\tline.geometry.setDrawRange(0, newValue);\n}\n\ndoParallax() {\n\t// parallax\n\tconst parallax = this.parallax;\n\tparallax.x += (this.mouse.x - parallax.x) / 8;\n\tparallax.y += (this.mouse.y - parallax.y) / 8;\n\t// this.light1.position.set(parallax.x * 5.0, 6.0 + parallax.y * 2.0, 4.0);\n\t// this.light2.position.set(parallax.x * -5.0, -6.0 - parallax.y * 2.0, 4.0);\n}\n\nconst shaderPoint = {\n\tvertexShader: `\n\tattribute float size;\n\tattribute vec4 ca;\n\tvarying vec4 vColor;\n\tvoid main() {\n\t\tvColor = ca;\n\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\t\tgl_PointSize = size * (400.0 / -mvPosition.z);\n\t\tgl_Position = projectionMatrix * mvPosition;\n\t}\n\t`,\n\tfragmentShader: `\n\tuniform vec3 color;\n\tuniform sampler2D texture;\n\tvarying vec4 vColor;\n\tvoid main() {\n\t\tvec4 textureColor = texture2D(texture, gl_PointCoord);\n\t\t// if (textureColor.a < 0.5) discard;\n\t\tgl_FragColor = textureColor * vec4(color * vColor.xyz, 1.0);\n\t\t// float depth = gl_FragCoord.z / gl_FragCoord.w;\n\t\tgl_FragColor = vec4(vec3(1.0), gl_FragColor.w);\n\t}\n\t`,\n};\n\nconst material = new THREE.PointsMaterial({\n\tsize: 15,\n\tmap: loader.load('img/pin.png'),\n\tvertexColors: THREE.VertexColors,\n\tblending: THREE.AdditiveBlending,\n\tdepthTest: true,\n\ttransparent: true\n});\n*/\n/*\nconst material = new THREE.ShaderMaterial({\n\tuniforms: {\n\t\tcolor: { value: new THREE.Color(0xffffff) },\n\t\ttexture: { value: loader.load('img/pin.png') }\n\t},\n\tvertexColors: THREE.VertexColors,\n\tblending: THREE.AdditiveBlending,\n\tdepthTest: true,\n\ttransparent: true,\n\tvertexShader: shaderPoint.vertexShader,\n\tfragmentShader: shaderPoint.fragmentShader,\n\talphaTest: 0.9\n});\n*/\n/*\n\taddPoints_(parent) {\n\t\tconst loader = new THREE.TextureLoader();\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\t// hack fix\n\t\tconst vertices = [];\n\t\tvertices.push(0, -10000, 0);\n\t\tvertices.push(0, 10000, 0);\n\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\t\t// hack fix\n\t\tconst colors = new Array(100 * 3).fill(0);\n\t\tconst colorsAttribute = new THREE.Float32BufferAttribute(colors, 3);\n\t\tconst sizes = new Array(100).fill(10);\n\t\tgeometry.addAttribute('color', colorsAttribute);\n\t\tgeometry.addAttribute('customColor', new THREE.Float32BufferAttribute(colors, 3));\n\t\tgeometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tamplitude: { value: 1.0 },\n\t\t\t\tcolor: { value: new THREE.Color(0xffffff) },\n\t\t\t\ttexture: { value: loader.load('img/pin.png') }\n\t\t\t},\n\t\t\tvertexShader: shaderPoint.vertexShader,\n\t\t\tfragmentShader: shaderPoint.fragmentShader,\n\t\t\ttransparent: true\n\t\t});\n\t\t// materials[i].color.setHSL(1, 0, 0);\n\t\tconst points = new THREE.Points(geometry, material);\n\t\tpoints.vertices = vertices;\n\t\tpoints.colors = colors;\n\t\tpoints.colorsAttribute = colorsAttribute;\n\t\tpoints.scale.set(0.95, 0.95, 0.95);\n\t\tparent.add(points);\n\t\treturn points;\n\t}\n\n\taddPoint_(position, i) {\n\t\tconst points = this.points;\n\t\tconst geometry = points.geometry;\n\t\tconst vertices = points.vertices;\n\t\tconst index = vertices.length / 3;\n\t\tvertices.push(position.x, position.y, position.z);\n\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\t\tconst colorsAttribute = points.colorsAttribute;\n\t\tcolorsAttribute.setXYZ(index, 0, 0, 0);\n\t\tpoints.material.needsUpdate = true;\n\t\t// console.log(index, 'start');\n\t\tconst from = { opacity: 0 };\n\t\tTweenMax.to(from, 0.7, {\n\t\t\topacity: 1,\n\t\t\tdelay: 0.1 * i,\n\t\t\tease: Power2.easeInOut,\n\t\t\tonUpdate: () => {\n\t\t\t\t// console.log(index, from.opacity);\n\t\t\t\tcolorsAttribute.setXYZ(index, from.opacity, from.opacity, from.opacity);\n\t\t\t\tcolorsAttribute.needsUpdate = true;\n\t\t\t\tpoints.material.needsUpdate = true;\n\t\t\t},\n\t\t\tonCompleted: () => {\n\t\t\t\t// console.log(index, 'completed');\n\t\t\t}\n\t\t});\n\t}\n\n\tremovePoint_(i) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst points = this.points;\n\t\t\tconst geometry = points.geometry;\n\t\t\tconst vertices = points.vertices;\n\t\t\tconst index = vertices.length / 3;\n\t\t\tconst colorsAttribute = points.colorsAttribute;\n\t\t\tcolorsAttribute.setXYZ(index, 1, 1, 1);\n\t\t\tpoints.material.needsUpdate = true;\n\t\t\t// console.log(index, 'start');\n\t\t\tconst from = { opacity: 1 };\n\t\t\tTweenMax.to(from, 0.7, {\n\t\t\t\topacity: 0,\n\t\t\t\tdelay: 0.0 * i,\n\t\t\tease: Power2.easeInOut,\n\t\t\t\tonUpdate: () => {\n\t\t\t\t\t// console.log(index, from.opacity);\n\t\t\t\t\tcolorsAttribute.setXYZ(index, from.opacity, from.opacity, from.opacity);\n\t\t\t\t\tcolorsAttribute.needsUpdate = true;\n\t\t\t\t\tpoints.material.needsUpdate = true;\n\t\t\t\t},\n\t\t\t\tonCompleted: () => {\n\t\t\t\t\t// console.log(index, 'completed');\n\t\t\t\t\tvertices.splice(vertices.length - 3, 3);\n\t\t\t\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcreatePoint_(intersection) {\n\t\t// console.log(intersection);\n\t\tconst position = intersection.point.clone();\n\t\tthis.addPoint(this.points, position, 0);\n\t\tthis.view.points.push({\n\t\t\tid: 2,\n\t\t\tposition: position.toArray(),\n\t\t\ttype: 1,\n\t\t\tname: 'Point 2',\n\t\t\tkey: 'POINT2',\n\t\t});\n\t\t// p.multiplyScalar(1);\n\t}\n\n\nlet camera;\nif (USE_ORTHO) {\n\tconst width = 10;\n\tconst height = width / this.container.offsetWidth * this.container.offsetHeight;\n\tcamera = new THREE.OrthographicCamera(-width, width, height, -height, 0.01, 1000);\n} else {\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.01, 1000);\n}\n// const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 0.01, 1000);\ncamera.position.set(0, 5.0, 12.0);\ncamera.up = new THREE.Vector3(0, 0, -1);\ncamera.lookAt(new THREE.Vector3(0, 0, 0));\nthis.camera = camera;\n*/\n\n/*\nconst ambient = new THREE.AmbientLight(0x222222);\nscene.add(ambient);\nthis.ambient = ambient;\n*/\n\n/*\n// color : Integer, intensity : Float, distance : Number, decay : Float\nconst light = new THREE.PointLight(0xffffff, 1000, 1000, 1);\nlight.position.set(0, 0, 0);\nscene.add(light);\nthis.light = light;\n*/\n\n/*\nlet light1;\nlight1 = new THREE.DirectionalLight(0xffffff, 4.0);\n// light1.castShadow = true;\n// light1.shadowCameraVisible = true;\n// light1.mapSize.width = 2048;\n// light1.mapSize.height = 2048;\nscene.add(light1);\nthis.light1 = light1;\nif (SHOW_HELPERS) {\n\tconst light1Helper = new THREE.DirectionalLightHelper(light1, 1);\n\tscene.add(light1Helper);\n}\nconst light2 = new THREE.DirectionalLight(0xffffff, 4.0);\nscene.add(light2);\nthis.light2 = light2;\nif (SHOW_HELPERS) {\n\tconst light2Helper = new THREE.DirectionalLightHelper(light2, 1);\n\tscene.add(light2Helper);\n}\n*/\n"],"file":"docs/js/webvr.js"}