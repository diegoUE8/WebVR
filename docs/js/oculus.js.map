{"version":3,"names":[],"mappings":"","sources":["src/js/oculus.js"],"sourcesContent":["/* jshint esversion: 6 */\n/* global window, document, TweenMax, THREE, WEBVR */\n\nexport function random() {\n\treturn Math.random() - 0.5;\n}\n\nexport class Oculus {\n\n\tconstructor() {\n\t\tthis.count = 0;\n\t\tthis.normal = new THREE.Vector3();\n\t\tthis.relativeVelocity = new THREE.Vector3();\n\t\tthis.clock = new THREE.Clock();\n\t}\n\n\tinit() {\n\t\tconst section = document.querySelector('.webvr');\n\t\tconst container = section.querySelector('.webvr__container');\n\t\tconst scene = this.scene = this.addScene();\n\t\tconst camera = this.camera = this.addCamera();\n\t\tconst room = this.room = this.addRoom(scene);\n\t\tconst bills = this.bills = this.addBillsToFloor(room);\n\t\tconst renderer = this.renderer = this.addRenderer(container);\n\t\t// controllers\n\t\tconst left = this.left = this.addControllerLeft(renderer, scene);\n\t\tconst right = this.right = this.addControllerRight(renderer, scene);\n\t\t// hands\n\t\tconst hands = this.hands = this.addHands();\n\t\t// this.onSelectStart = this.onSelectStart.bind(this);\n\t\t// this.onSelectEnd = this.onSelectEnd.bind(this);\n\t\tthis.onWindowResize = this.onWindowResize.bind(this);\n\t\twindow.addEventListener('resize', this.onWindowResize, false);\n\t}\n\n\taddScene() {\n\t\tconst scene = new THREE.Scene();\n\t\tscene.background = new THREE.Color(0x404040);\n\t\tscene.fog = new THREE.Fog(scene.background, 10, 15);\n\t\treturn scene;\n\t}\n\n\taddCamera() {\n\t\tconst camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 20);\n\t\treturn camera;\n\t}\n\n\taddRoom(scene) {\n\t\tconst geometry = new THREE.PlaneBufferGeometry(15, 15);\n\t\tgeometry.rotateX(-Math.PI / 2);\n\t\tgeometry.translate(0, -0.01, 0);\n\t\tconst material = new THREE.MeshBasicMaterial({ color: 0x202020 });\n\t\tconst room = new THREE.Mesh(geometry, material);\n\t\tscene.add(room);\n\t\treturn room;\n\t}\n\n\taddRenderer(container) {\n\t\tconst renderer = new THREE.WebGLRenderer({ antialias: true });\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\trenderer.vr.enabled = true;\n\t\tcontainer.appendChild(renderer.domElement);\n\t\tdocument.body.appendChild(WEBVR.createButton(renderer));\n\t\treturn renderer;\n\t}\n\n\taddControllerLeft(renderer, scene) {\n\t\tconst controller = renderer.vr.getController(0);\n\t\tcontroller.addEventListener('selectstart', this.onSelectStart.bind(controller));\n\t\tcontroller.addEventListener('selectend', this.onSelectEnd.bind(controller));\n\t\tscene.add(controller);\n\t\treturn controller;\n\t}\n\n\taddControllerRight(renderer, scene) {\n\t\tconst controller = renderer.vr.getController(1);\n\t\t/*\n\t\tcontroller.addEventListener('selectstart', this.onSelectStart.bind(controller));\n\t\tcontroller.addEventListener('selectend', this.onSelectEnd.bind(controller));\n\t\t*/\n\t\tscene.add(controller);\n\t\treturn controller;\n\t}\n\n\taddBillsToFloor(room) {\n\t\tconst geometry = new THREE.PlaneBufferGeometry(0.2, 0.09);\n\t\tgeometry.rotateZ(Math.PI / 2);\n\t\tgeometry.rotateX(-Math.PI / 2);\n\t\tconst texture = new THREE.TextureLoader().load('https://cdn.glitch.com/cf086db5-7af7-4f20-8220-93d1d99150b7%2F100_dollar_bill_vector.png?1558543607686');\n\t\ttexture.anisotropy = 8;\n\t\tconst material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n\t\tconst bills = new Array(400).fill(0).map((x, i) => {\n\t\t\tconst bill = new THREE.Mesh(geometry, material);\n\t\t\tbill.position.x = random() * 8;\n\t\t\tbill.position.y = Math.random() * 6;\n\t\t\tbill.position.z = random() * 8;\n\t\t\tbill.rotation.y = random() * Math.PI * 2;\n\t\t\tbill.userData.velocity = new THREE.Vector3();\n\t\t\tbill.userData.velocity.x = random() * 0.01;\n\t\t\tbill.userData.velocity.y = random() * 0.01;\n\t\t\tbill.userData.velocity.z = random() * 0.01;\n\t\t\tbill.userData.noise = random() * 0.1;\n\t\t\troom.add(bill);\n\t\t\treturn bill;\n\t\t});\n\t\treturn bills;\n\t}\n\n\taddBillsToHand(hand) {\n\t\tconst room = this.room;\n\t\tconst bills = new Array(10).fill(0).map((x, i) => {\n\t\t\tconst bill = room.children[0].clone();\n\t\t\tbill.position.set(i * 0.003 + 0.02, -0.05, 0);\n\t\t\tbill.rotation.set(random() * 0.3, random() * 0.1, -Math.PI / 2);\n\t\t\thand.add(bill);\n\t\t\tthis.right.userData.bill = bill; // pointer to last bill\n\t\t\treturn bill;\n\t\t});\n\t\treturn bills;\n\t}\n\n\taddHands() {\n\t\tconst hands = [];\n\t\tconst left = this.left;\n\t\tconst right = this.right;\n\t\tconst file = 'https://cdn.glitch.com/7ae766be-18fb-4945-ad9d-8cc3be027694%2Fhand.obj?1558677422910';\n\t\tconst loader = new THREE.OBJLoader();\n\t\tloader.load(file, (group) => {\n\t\t\tconst texture = new THREE.TextureLoader().load('https://cdn.glitch.com/7ae766be-18fb-4945-ad9d-8cc3be027694%2FBazC_SkinMat.jpg?1558678160164');\n\t\t\tconst hand = group.children[0];\n\t\t\thand.geometry.rotateZ(-Math.PI / 2);\n\t\t\thand.geometry.rotateY(Math.PI);\n\t\t\thand.geometry.translate(1, -0.2, 0.25);\n\t\t\thand.geometry.scale(0.1, 0.1, 0.1);\n\t\t\thand.material = new THREE.MeshMatcapMaterial({ matcap: texture });\n\t\t\thand.scale.x = -1;\n\t\t\tconst leftHand = hand.clone();\n\t\t\tleft.add(leftHand);\n\t\t\thands.push(leftHand);\n\t\t\thand.scale.x = 1;\n\t\t\tconst bills = this.addBillsToHand(hand);\n\t\t\tconst rightHand = hand.clone();\n\t\t\tright.add(rightHand);\n\t\t\thands.push(rightHand);\n\t\t});\n\t\treturn hands;\n\t}\n\n\tonSelectStart() {\n\t\tthis.userData.isSelecting = true;\n\t}\n\n\tonSelectEnd() {\n\t\tthis.userData.isSelecting = false;\n\t}\n\n\tonWindowResize() {\n\t\tconst camera = this.camera;\n\t\tconst renderer = this.renderer;\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t}\n\n\thandleController(controller) {\n\t\tconst room = this.room;\n\t\tif (controller.userData.isSelecting) {\n\t\t\tconst bill = room.children[count++];\n\t\t\tconst emitter = controller.children[0].children[9];\n\t\t\temitter.matrixWorld.decompose(bill.position, bill.quaternion, bill.scale);\n\t\t\tbill.userData.velocity.x = random();\n\t\t\tbill.userData.velocity.y = random() + 0.5;\n\t\t\tbill.userData.velocity.z = Math.random() - 5;\n\t\t\tbill.userData.velocity.applyQuaternion(bill.quaternion);\n\t\t\tbill.userData.noise = random() * 0.1;\n\t\t\tif (count === room.children.length) count = 0;\n\t\t}\n\t}\n\n\thandleBills() {\n\t\tconst clock = this.clock;\n\t\tconst room = this.room;\n\t\tconst delta = clock.getDelta() * 0.5; // slow down simulation\n\t\troom.children.forEach(bill => {\n\t\t\tconst userData = bill.userData;\n\t\t\tconst velocity = userData.velocity;\n\t\t\tbill.position.x += velocity.x * delta;\n\t\t\tbill.position.y += velocity.y * delta;\n\t\t\tbill.position.z += velocity.z * delta;\n\t\t\t// flatten rotation\n\t\t\tbill.rotation.x *= 0.99;\n\t\t\tbill.rotation.z *= 0.99;\n\t\t\t// handle floor\n\t\t\tif (bill.position.y <= 0) {\n\t\t\t\tbill.position.y = 0;\n\t\t\t\tvelocity.x *= 0.85;\n\t\t\t\tvelocity.y = 0;\n\t\t\t\tvelocity.z *= 0.85;\n\t\t\t}\n\t\t\tconst height = bill.position.y * 0.1;\n\t\t\tif (height > 0) {\n\t\t\t\tvelocity.x += userData.noise * height;\n\t\t\t\tvelocity.y -= 9.8 * delta;\n\t\t\t\tvelocity.z += userData.noise * height;\n\t\t\t\tbill.rotation.y += userData.noise * height;\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tconst left = this.left;\n\t\tconst right = this.right;\n\t\tconst renderer = this.renderer;\n\t\tconst scene = this.scene;\n\t\tconst camera = this.camera;\n\t\tthis.handleController(left);\n\t\tthis.handleController(right);\n\t\tthis.handleBills();\n\t\trenderer.render(scene, camera);\n\t}\n\n\tanimate() {\n\t\tconst left = this.left;\n\t\tconst right = this.right;\n\t\tconst renderer = this.renderer;\n\t\tconst scene = this.scene;\n\t\tconst camera = this.camera;\n\t\tconst handleController = this.handleController.bind(this);\n\t\tconst handleBills = this.handleBills.bind(this);\n\t\tconst render = function() {\n\t\t\thandleController(left);\n\t\t\thandleController(right);\n\t\t\thandleBills();\n\t\t\trenderer.render(scene, camera);\n\t\t}\n\t\tthis.renderer.setAnimationLoop(render);\n\t}\n\n}\n\nconst oculus = new Oculus();\n\n// window.onload = () => {\noculus.init();\noculus.animate();\n// };\n"],"file":"docs/js/oculus.js"}